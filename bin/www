#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('followers-be:server');
const http = require('http');
const chalk = require('chalk');
const DBHandler = require('../modules/db/db.handler');
let server;

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP/HTTPS server.
 */
if (process.env.NODE_ENV === 'development') {
    server = http.createServer(app);
} else {
    // production mode
}

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, () => {
    console.log(chalk.yellowBright(`(${process.env.NODE_ENV ? process.env.NODE_ENV : 'development'}) Server started on localhost:${port}`));
    start().then(r => {
    });
});

/**
 * Main Process
 * @returns {Promise<void>}
 */
async function start() {
    let connectedToDB = true;

    await DBHandler.connect().catch(e => { // the async/wait make this method run in synchronization. We catch the error to prevent the uncaught promise rejection exception
        DBHandler.disconnect();
        connectedToDB = false;
    });

    if (!connectedToDB) return;

    if (process.env.SEED === 'true') DBHandler.doSeeding(); // insert data to DB
}

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) return val;
    if (port >= 0) return port;

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
